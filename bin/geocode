#!/usr/bin/env ruby
require 'trollop'
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'geocode'))

config_file = ["./geocode.yml", "~/.geocode/geocode.yml"].map {|p| File.expand_path(p)}.find {|p| File.exists? p}

config = config_file ? YAML::load_file(config_file) : {}
config.each { |k,v| config[k.to_sym] = v}


# Notes:
# - If you specify --reverse, all of the following will be turned off: --latlng --viewport --accuracy
# - If you specify none of --reverse, --latlng, --viewport, or --accuracy, --latlng will be assumed.
opts = Trollop.options do
  opt :google_api_key, "API KEY to use", :default => nil
  opt :service, "Geocoding Service to use", :default => nil
  opt :reverse, "Reverse geocode", :type => :boolean, :default => false
  opt :latlng, "Geocode to lat,lng (default)", :type => :boolean, :default => false
  opt :viewport, "Show viewport (map extents) of location", :type => :boolean, :default => false
  opt :accuracy, "Show accuracy level of geocoded location", :type => :boolean, :default => false
  opt :dump, "Dump the geocoded results", :type => :boolean, :default => false
  opt :distance, "Distance between locations. Requires 2nd address or lat/lng pair; separate with :", :type => :boolean, :default => false
  opt :bearing, "Bearing (forward azimuth) to second location.Requires 2nd address or lat/lng pair; separate with :", :type => :boolean, :default => false
  # TODO: Show this in metric as well as Burmese Units...
  opt :miles, "Show the viewport size in miles", :type => :boolean, :default => false
  opt :quiet, "Don't show labels", :type => :boolean, :default => false
end

opts[:google_api_key] ||= config[:google_api_key] || ""
opts[:service] ||= config[:service] || "google"
opts[:service] = opts[:service].to_sym


# reverse geocoding is not compatible with latlng / viewport / accuracy.
if opts[:reverse] && opts[:latlng]
  opts[:latlng] = false
  opts[:viewport] = false
  opts[:accuracy] = false
  opts[:miles] = false
end

# Default latlng to true if no other options have been given
opts[:latlng] = true unless [:miles, :reverse, :viewport, :accuracy].any? { |option| opts[option] }


# geocode the address or lat/lng given
g = Geocode.new_geocoder(opts[:service], opts)

argv1, argv2 = ARGV.join(' ').split(/:/, 2)

geo1 = if opts[:reverse]
         g.reverse_geocode(argv1)
       else
         g.geocode(argv1)
       end

if argv2
  geo2 = if opts[:reverse]
           g.reverse_geocode(argv2)
         else
           g.geocode(argv2)
         end
end

if opts[:latlng]
  print 'Location: ' unless opts[:quiet]
  puts "%f,%f" % geo1.latlng
end

if opts[:viewport]
  print 'Viewport: ' unless opts[:quiet]
  vp = geo1.viewport
  puts "%f,%f %f,%f" % vp
end

if opts[:miles]
  print 'Viewport Height (miles): ' unless opts[:quiet]
  puts "%f" % geo1.viewport_height
end
  
if opts[:accuracy]
  print 'Accuracy: ' unless opts[:quiet]
  puts geo1.accuracy
end
  
if opts[:reverse]
  print 'Address: ' unless opts[:quiet]
  puts geo1.address
end

if opts[:dump]
  puts 'Dump: ' unless opts[:quiet]
  puts geo1.dump
end

if opts[:bearing]
  puts 'Bearing: ' unless opts[:quiet]
  puts geo1.bearing_to(geo2)
end

if opts[:distance]
  puts 'Distance: ' unless opts[:quiet]
  puts geo1.distance_to(geo2)
end
